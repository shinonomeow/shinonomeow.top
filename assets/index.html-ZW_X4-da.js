import{_ as s,c as i,a,o as t}from"./app-CN1iVX_s.js";const n={};function r(l,e){return t(),i("div",null,[...e[0]||(e[0]=[a(`<p>以前一直是内网访问, 很少考虑外网访问的安全性问题, 最近开始弄服务器之后才发现这么多问题, iptables 是一个很好的工具, 可以阻止很多奇怪的访问, 但是也被docker透烂了, 会加一些奇怪的规则, 导致可以直接ip:端口号访问, 让我措手不及. 现在弄到了两种解决的办法</p><h2 id="屏蔽端口访问" tabindex="-1"><a class="header-anchor" href="#屏蔽端口访问"><span>屏蔽端口访问</span></a></h2><p>虽然docker插入了奇怪的iptables, 不过我们也可以加, 屏蔽相应的 docker 端口实现屏蔽ip访问的效果.</p><p><code>iptables -I DOCKER-USER -p tcp --dport 5244 -j DROP</code></p><blockquote><p><a href="https://www.cnblogs.com/xiongzaiqiren/p/iptables.html" target="_blank" rel="noopener noreferrer">详情可看</a></p></blockquote><div class="hint-container warning"><p class="hint-container-title">注意</p><p>这个端口是容器的端口, 不是你映射出来的端口</p></div><h2 id="只允许本地访问" tabindex="-1"><a class="header-anchor" href="#只允许本地访问"><span>只允许本地访问</span></a></h2><p>本来这些服务我就是要通过 nginx 映射出去使用的, 我只是不希望ip:端口的访问, 于是我发现这种我更加喜欢的写法</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">memos</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">image</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> neosmemo/memos:stable</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">container_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> memos</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">restart</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> always</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">network_mode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bridge</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">ports</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 127.0.0.1:5230:5230</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 127.0.0.1:5230 这种写法, 就可以避免这些问题了.</p><h3 id="docker-network" tabindex="-1"><a class="header-anchor" href="#docker-network"><span>docker network</span></a></h3><p>今天发现如果是一个 network 里面的容器, 可以通过容器名实现直接访问.</p><p>这解决了我不想把 rsshub 开放到公网又不知道怎么让阅读器使用的问题.</p>`,13)])])}const o=s(n,[["render",r]]),d=JSON.parse('{"path":"/tools/f70e1a/","title":"docker","lang":"zh-CN","frontmatter":{"title":"docker","createTime":"2024-04-24T20:31:59.000Z","permalink":"/tools/f70e1a/","categories":["工具","系统工具"],"titleTag":"喵喵","tags":[null],"feed":{"enable":true},"description":"以前一直是内网访问, 很少考虑外网访问的安全性问题, 最近开始弄服务器之后才发现这么多问题, iptables 是一个很好的工具, 可以阻止很多奇怪的访问, 但是也被docker透烂了, 会加一些奇怪的规则, 导致可以直接ip:端口号访问, 让我措手不及. 现在弄到了两种解决的办法 屏蔽端口访问 虽然docker插入了奇怪的iptables, 不过我们...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"docker\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-27T11:13:57.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://shinonomeow.top/tools/f70e1a/"}],["meta",{"property":"og:site_name","content":"東雲研究所"}],["meta",{"property":"og:title","content":"docker"}],["meta",{"property":"og:description","content":"以前一直是内网访问, 很少考虑外网访问的安全性问题, 最近开始弄服务器之后才发现这么多问题, iptables 是一个很好的工具, 可以阻止很多奇怪的访问, 但是也被docker透烂了, 会加一些奇怪的规则, 导致可以直接ip:端口号访问, 让我措手不及. 现在弄到了两种解决的办法 屏蔽端口访问 虽然docker插入了奇怪的iptables, 不过我们..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-27T11:13:57.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-27T11:13:57.000Z"}]]},"readingTime":{"minutes":1.21,"words":364},"git":{"createdTime":1737976437000,"updatedTime":1737976437000,"contributors":[{"name":"東雲柊","username":"","email":"gtx2shino@gmail.com","commits":1,"avatar":"https://gravatar.com/avatar/a85c5cf42a533c53c895373652a8b15621ed6ecb8411d8e1b58c894a5ac91de9?d=retro"}]},"autoDesc":true,"filePathRelative":"tools/2.docker.md","headers":[],"categoryList":[{"id":"4a9315","sort":10006,"name":"tools"}]}');export{o as comp,d as data};
